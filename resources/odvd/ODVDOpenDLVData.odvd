/*
 * Copyright (C) 2015 Chalmers REVERE
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

message opendlv.Constants [id = 150] {
  const double PI = 3.141592653589793;
  const double DEG2RAD = 0.017453292522222;  // PI/180.0
  const double RAD2DEG = 57.295779513082325; // 1.0 / DEG2RAD;
}

message opendlv.model.Cartesian3 [id = 151] {
  float x [id = 1];
  float y [id = 2];
  float z [id = 3];
}

message opendlv.model.Direction [id = 152] {
  float azimuth [id = 1];
  float zenith [id = 2];
}

message opendlv.model.State [id = 153] {
  opendlv.model.Cartesian3 position [id = 1];
  opendlv.model.Cartesian3 angularDisplacement [id = 2];
  int16 frameId [id = 3];
}

message opendlv.model.DynamicState [id = 154] {
  opendlv.model.Cartesian3 velocity [id = 1];
  opendlv.model.Cartesian3 velocityConfidence [id = 2];

  opendlv.model.Cartesian3 acceleration [id = 3];
  opendlv.model.Cartesian3 accelerationConfidence [id = 4];

  opendlv.model.Cartesian3 angularVelocity [id = 5];
  opendlv.model.Cartesian3 angularVelocityConfidence [id = 6];

  opendlv.model.Cartesian3 angularAcceleration [id = 7];
  opendlv.model.Cartesian3 angularAccelerationConfidence [id = 8];
  int16 frameId [id = 9];
}

message opendlv.proxy.ActuationRequest [id = 160] {
  float acceleration [id = 1];
  float steering [id = 2];
  bool isValid [id = 3];
}

message opendlv.proxy.AnalogRequest [id = 164] {
  double value [id = 1];
  uint32 target [id = 2];
}

message opendlv.proxy.ControlState [id = 165] {
  bool isAutonomous [id = 1];
}

message opendlv.proxy.EchoReading [id = 166] {
  list<opendlv.model.Direction> directions [id = 1];
  list<double> radii [id = 2];
  uint32 numberOfPoints [id = 3];
}

// This message is already migrated to OpenDLV.core. DO NOT CHANGE CONTENT OR IDENTIFIERS HERE!
message opendlv.proxy.GpsReading [id = 167] {
  double timestamp [id = 1];
  double latitude [id = 2];
  double longitude [id = 3];
  double altitude [id = 4];
  double northHeading [id = 5];
  double speed [id = 6];
  uint8 latitudeDirection [id = 7];
  uint8 longitudeDirection [id = 8];
  uint8 satelliteCount [id = 9];
  bool hasHeading [id = 10];
  bool hasRtk [id = 11];
}

message opendlv.proxy.PointCloudReading [id = 49] {
  float startAzimuth [id = 1];
  float endAzimuth [id = 2];
  uint8 entriesPerAzimuth [id = 3];
  bytes distances [id = 4];
  uint8 numberOfBitsForIntensity [id = 5];
}

message opendlv.proxy.LedRequest [id = 169] {
  uint8 numberOfLeds [id = 1];
  string data [id = 2];
}

message opendlv.sensation.Geolocation [id = 176] {
  double latitude [id = 1];
  float latitudeConfidence [id = 2];
  double longitude [id = 3];
  float longitudeConfidence [id = 4];
  float altitude [id = 5];
  float heading [id = 6];
  float headingConfidence [id = 7];
}

message opendlv.sensation.Looming [id = 177] {
  uint16 numberOfPoints [id = 1];
  list<opendlv.model.Direction> directions [id = 2];
  list<float> expansion [id = 4];
}

message opendlv.sensation.OpticalFlow [id = 178] {
  uint16 numberOfPoints [id = 1];
  list<opendlv.model.Direction> directions [id = 2];
  list<float> u [id = 3];
  list<float> v [id = 4];
}

message opendlv.sensation.DirectionOfMovement [id = 179] {
  opendlv.model.Direction direction [id = 1];
}

message opendlv.perception.Object [id = 181] {
  odcore::data::TimeStamp identified [id = 1];
  string type [id = 2];
  float typeConfidence [id = 3];

  opendlv.model.Direction direction [id = 4];
  float directionConfidence [id = 5];
  opendlv.model.Direction directionRate [id = 6];
  float directionRateConfidence [id = 7];

  float distance [id = 8];
  float distanceConfidence [id = 9];

  float angularSize [id = 10];
  float angularSizeConfidence [id = 11];
  float angularSizeRate [id = 12];
  float angularSizeRateConfidence [id = 13];

  float confidence [id = 14];
  list<string> sources [id = 15];

  list<string> properties [id = 16];

  int16 objectId [id = 17];
}

message opendlv.perception.Environment [id = 189] {
  odcore::data::TimeStamp validUntil [id = 1];
  list<opendlv.perception.Object> objects [id = 2];
  list<opendlv.perception.Surface> surfaces[id = 3];
}

message opendlv.perception.Surface [id = 184] {
  odcore::data::TimeStamp identified [id = 1];
  string type [id = 2];
  float typeConfidence [id = 3];

  list<opendlv.model.Cartesian3> edges [id = 4];
  float edgesConfidence [id = 5];

  bool traversable [id = 6];

  float confidence [id = 7];
  list<string> sources [id = 8];

  list<string> properties [id = 9];

  int16 surfaceId [id = 10];

  list<int16> connectedWith [id = 11];
  list<int16> traversableTo [id = 12];
}

message opendlv.perception.StimulusDirectionOfMovement [id = 180] {
  odcore::data::TimeStamp identified [id = 1];
  opendlv.model.Direction desiredDirectionOfMovement [id = 2];
  opendlv.model.Direction directionOfMovement [id = 3];
}

message opendlv.perception.StimulusGroundSpeed [id = 174] {
  odcore::data::TimeStamp identified [id = 1];
  float desiredGroundSpeed [id = 2];
  float groundSpeed [id = 3];
}

message opendlv.perception.StimulusDirectionAlignment [id = 182] {
  odcore::data::TimeStamp identified [id = 1];
  opendlv.model.Direction direction [id = 2];
  opendlv.model.Direction desiredDirection [id = 3];
}

message opendlv.perception.StimulusAngularSizeAlignment [id = 183] {
  odcore::data::TimeStamp identified [id = 1];
  opendlv.model.Direction direction [id = 2];
  float angularSize [id = 3];
  float desiredAngularSize [id = 4];
}

message opendlv.knowledge.Message [id = 185] {
  uint32 size [id = 1];
  string data [id = 2];
}

message opendlv.knowledge.Insight [id = 187] {
  odcore::data::TimeStamp insightTime [id = 1];
  string insight [id = 2];
}

message opendlv.action.Correction [id = 186] {
  odcore::data::TimeStamp startTime [id = 1];
  string type [id = 2];
  bool isInhibitory [id = 3];
  float amplitude [id = 4];
}

// This message broadcasts the system's health as key/values.
message opendlv.system.diagnostics.HealthStatus [id = 200] {
    map<string,string> status [id = 1];
}

message opendlv.proxy.V2vReading [id = 171] {
  uint32 size [id = 1];
  string data [id = 2];
}

message opendlv.proxy.V2vRequest [id = 172] {
  uint32 size [id = 1];
  string data [id = 2];
}

message opendlv.sensation.Voice [id = 175] {
  string type [id = 1];
  uint32 size [id = 2];
  string data [id = 3];
}

message opendlv.device.gps.pos.TimeDistance [id = 532] {
/*
    enum TimeType {
        TIMETYPE_POS                    = 0,
        TIMETYPE_GPS                    = 1,
        TIMETYPE_UTC                    = 2,
        TIMETYPE_USER                   = 3,
    };

    enum DistanceType {
        DISTANCETYPE_NA                 = 0,
        DISTANCETYPE_POS                = 1,
        DISTANCETYPE_DMI                = 2,
    };
*/
    double time1                        [id = 1];
    double time2                        [id = 2];
    double distanceTag                  [id = 3];
/*
    TimeType time1Type                  [id = 4];
    TimeType time2Type                  [id = 5];
    DistanceType distanceType           [id = 6];
*/
}

message opendlv.device.gps.pos.Grp1Data [id = 533] {
    double lat                          [id = 2];
    double lon                          [id = 3];
    double alt                          [id = 4];
    float vel_north                     [id = 5];
    float vel_east                      [id = 6];
    float vel_down                      [id = 7];
    double roll                         [id = 8];
    double pitch                        [id = 9];
    double heading                      [id = 10];
    double wander                       [id = 11];
    float track                         [id = 12];
    float speed                         [id = 13];
    float arate_lon                     [id = 14];
    float arate_trans                   [id = 15];
    float arate_down                    [id = 16];
    float accel_lon                     [id = 17];
    float accel_trans                   [id = 18];
    float accel_down                    [id = 19];
    uint8 alignment                     [id = 20];
    opendlv.device.gps.pos.TimeDistance timeDistance [id = 23];
}

//message opendlv.adaptation.MonitorAdaptation [id = 190] {
	//uint32 vehicleId [id = 1];
    //string monitorName [id = 2];
    //string action [id = 3];
//}

message opendlv.sim.Frame [id = 1001] {
  float x [id = 1];
  float y [id = 2];
  float z [id = 3];
  float roll [id = 4];
  float pitch [id = 5];
  float yaw [id = 6];
}

message opendlv.sim.KinematicState [id = 1002] {
  float vx [id = 1];
  float vy [id = 2];
  float vz [id = 3];
  float rollRate [id = 4];
  float pitchRate [id = 5];
  float yawRate [id = 6];
}

message opendlv.body.ComponentInfo [id = 1021] {
  string description [id = 1];
  float x [id = 2];
  float y [id = 3];
  float z [id = 4];
}

message opendlv.body.ActuatorInfo [id = 1022] {
  string description [id = 1];
  float x [id = 2];
  float y [id = 3];
  float z [id = 4];
  uint32 signalId [id = 5];
  float minValue [id = 6];
  float maxValue [id = 7];
}

message opendlv.body.SensorInfo [id = 1023] {
  string description [id = 1];
  float x [id = 2];
  float y [id = 3];
  float z [id = 4];
  uint32 signalId [id = 5];
  float accuracyStd [id = 6];
  uint16 minFrequency [id = 7];
}

message opendlv.body.SignalInfo [id = 1024] {
  string description [id = 1];
  uint32 signalId [id = 2];
  float accuracyStd [id = 3];
  uint16 minFrequency [id = 4];
}

message opendlv.proxy.AccelerationReading [id = 1030] {
  float accelerationX [id = 1];
  float accelerationY [id = 2];
  float accelerationZ [id = 3];
}

message opendlv.proxy.AngularVelocityReading [id = 1031] {
  float angularVelocityX [id = 1];
  float angularVelocityY [id = 2];
  float angularVelocityZ [id = 3];
}

message opendlv.proxy.MagneticFieldReading [id = 1032] {
  float magneticFieldX [id = 1];
  float magneticFieldY [id = 2];
  float magneticFieldZ [id = 3];
}

message opendlv.proxy.AltitudeReading [id = 1033] {
  float altitude [id = 1];
}

message opendlv.proxy.PressureReading [id = 1034] {
  float pressure [id = 1];
}

message opendlv.proxy.TemperatureReading [id = 1035] {
  float temperature [id = 1];
}

message opendlv.proxy.TorqueReading [id = 1036] {
  float torque [id = 1];
}

message opendlv.proxy.VoltageReading [id = 1037] {
  float voltage [id = 1];
}

message opendlv.proxy.AngleReading [id = 1038] {
  float angle [id = 1];
}

message opendlv.proxy.DistanceReading [id = 1039] {
  float distance [id = 1];
}

message opendlv.proxy.SwitchStateReading [id = 1040] {
  int16 state [id = 1];
}

message opendlv.proxy.PedalPositionReading [id = 1041] {
  float position [id = 1];
}

message opendlv.proxy.GroundSteeringReading [id = 1045] {
  float groundSteering [id = 1];
}

message opendlv.proxy.GroundSpeedReading [id = 1046] {
  float groundSpeed [id = 1];
}

message opendlv.proxy.WheelSpeedReading [id = 1047] {
  float wheelSpeed [id = 1];
}

message opendlv.proxy.WeightReading [id = 1050] {
  float weight [id = 1];
}

message opendlv.proxy.GeodeticHeadingReading [id = 1051] {
  float northHeading [id = 1];
}

message opendlv.proxy.GeodeticWgs84Reading [id = 19] {
  double latitude [id = 1];
  double longitude [id = 3];
}

// opendlv.proxy.ImageReading [id = ]

message opendlv.proxy.ImageReadingShared [id = 14] {
    string name [id = 1];
    uint32 size [id = 2];
    uint32 width [id = 3];
    uint32 height [id = 4];
    uint32 bytesPerPixel [id = 5];
}

message opendlv.proxy.PointCloudReadingShared [id = 28] {
  string name [id = 1];
  uint32 size [id = 2];
  uint32 width [id = 3];
  uint32 height [id = 4];
  uint8 numberOfComponentsPerPoint [id = 5];
}

// V2xReading?


message opendlv.proxy.PressureRequest [id = 1080] {
  float pressure [id = 1];
}

message opendlv.proxy.TemperatureRequest [id = 1081] {
  float temperature [id = 1];
}

message opendlv.proxy.TorqueRequest [id = 1082] {
  float torque [id = 1];
}

message opendlv.proxy.VoltageRequest [id = 1083] {
  float voltage [id = 1];
}

message opendlv.proxy.AngleRequest [id = 1084] {
  float angle [id = 1];
}

message opendlv.proxy.SwitchStateRequest [id = 1085] {
  int16 state [id = 1];
}

message opendlv.proxy.PedalPositionRequest [id = 1086] {
  float position [id = 1];
}

message opendlv.proxy.PulseWidthModulationRequest [id = 1087] {
  uint32 dutyCycleNs [id = 1];
}

message opendlv.proxy.GroundSteeringRequest [id = 1090] {
  float groundSteering [id = 1];
}

message opendlv.proxy.GroundSpeedRequest [id = 1091] {
  float groundSpeed [id = 1];
}

message opendlv.proxy.GroundAccelerationRequest [id = 1092] {
  float groundAcceleration [id = 1];
}

message opendlv.proxy.GroundDecelerationRequest [id = 1093] {
  float groundDeceleration [id = 1];
}

message opendlv.proxy.WheelSpeedRequest [id = 1094] {
  float wheelSpeed [id = 1];
}

// V2xRequest?


message opendlv.system.SignalStatusMessage [id = 1100] {
  int32 code [id = 1];
  string description [id = 2];
}

message opendlv.system.SystemOperationState [id = 1101] {
  int32 code [id = 1];
  string description [id = 2];
}

message opendlv.system.NetworkStatusMessage [id = 1102] {
  int32 code [id = 1];
  string description [id = 2];
}



message opendlv.logic.sensation.Direction [id = 1110] {
  float azimuthAngle [id = 1];
  float zenithAngle [id = 2];
}

message opendlv.logic.sensation.Point [id = 1111] {
  float azimuthAngle [id = 1];
  float zenithAngle [id = 2];
  float distance [id = 3];
}

message opendlv.logic.sensation.Equilibrioception [id = 1017] {
  float vx [id = 1];
  float vy [id = 2];
  float vz [id = 3];
  float rollRate [id = 4];
  float pitchRate [id = 5];
  float yawRate [id = 6];
}



message opendlv.logic.perception.Object [id = 1130] {
  uint32 objectId [id = 1];
}

message opendlv.logic.perception.ObjectType [id = 1131] {
  uint32 objectId [id = 1];
  uint32 type [id = 2];
}

message opendlv.logic.perception.ObjectProperty [id = 1132] {
  uint32 objectId [id = 1];
  string property [id = 2];
}

message opendlv.logic.perception.ObjectDirection [id = 1133] {
  uint32 objectId [id = 1];
  float azimuthAngle [id = 2];
  float zenithAngle [id = 3];
}

message opendlv.logic.perception.ObjectDistance [id = 1134] {
  uint32 objectId [id = 1];
  float distance [id = 2];
}

message opendlv.logic.perception.ObjectAngularBlob [id = 1135] {
  uint32 objectId [id = 1];
  float width [id = 2];
  float height [id = 3];
}

message opendlv.logic.perception.GroundSurface [id = 1140] {
  uint32 surfaceId [id = 1];
}

message opendlv.logic.perception.GroundSurfaceType [id = 1141] {
  uint32 surfaceId [id = 1];
  uint32 type [id = 2];
}

message opendlv.logic.perception.GroundSurfaceProperty [id = 1142] {
  uint32 surfaceId [id = 1];
  string property [id = 2];
}

message opendlv.logic.perception.GroundSurfaceArea [id = 1143] {
  uint32 surfaceId [id = 1];
  float x1 [id = 2];
  float y1 [id = 3];
  float x2 [id = 4];
  float y2 [id = 5];
  float x3 [id = 6];
  float y3 [id = 7];
  float x4 [id = 8];
  float y4 [id = 9];
}


message opendlv.logic.action.AimDirection [id = 1171] {
  float azimuthAngle [id = 1];
  float zenithAngle [id = 2];
}

message opendlv.logic.action.AimPoint [id = 1172] {
  float azimuthAngle [id = 1];
  float zenithAngle [id = 2];
  float distance [id = 3];
}

message opendlv.logic.action.PreviewPoint [id = 1173] {
  float azimuthAngle [id = 1];
  float zenithAngle [id = 2];
  float distance [id = 3];
}

message opendlv.logic.cognition.GroundSteeringLimit [id = 1191] {
  float steeringLimit [id = 1];
}

message opendlv.logic.cognition.GroundSpeedLimit [id = 1192] {
  float speedLimit [id = 1];
}
